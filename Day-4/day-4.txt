1] const one=<h1> this is one </h1>


2] const two=(<ul> ...... </ul>)


3] const greet=<h1> Good evening </h1>
   const message=<h1> Hello {greet} </h1>

4] function who(){
	return "Eshan";
    }
   const greeter=<h1> Hello {who()} </h1>



    
    
    
    
    


import React from 'react'
import ReactDOM from 'react-dom'
import App from './App.jsx'
import App2 from './App2.jsx'

function Welcome(props) {
    return <h1 > WELCOME TO NEW component { props.name } < /h1>
}


//</h1>const element = < Welcome name = "Eshan" / > ;

function MyApp() {
    return ( <
        div >
        <
        Welcome name = "Eshan" / >
        <
        Welcome name = "Tanish" / >
        <
        Welcome name = "Manish" / >
        <
        /div>
    )
}



ReactDOM.render( < MyApp / > ,
    document.getElementById("app")
);

ReactDOM.render( < App2 / > ,
    document.getElementById("app2")
);







import React from 'react'
import ReactDOM from 'react-dom'
import App from './App.jsx'
import App2 from './App2.jsx'

function Welcome(props) {
    return <h1 > WELCOME TO NEW component { props.name } < /h1>
}


const element = < Welcome name = "Eshan" / > ;


ReactDOM.render(element,
    document.getElementById("app")
);

ReactDOM.render( < App2 / > ,
    document.getElementById("app2")
);








<!DOCTYPE html>
<html>
<head>
	<title></title>
	<script type="text/javascript" src="hello.js"></script>
</head>
<body>
First line

<div id="hello"></div>
Last Line
</body>
</html>



jsx --executable web --output hello.jsx.js hello.jsx



import "js/web.jsx";

class _Main {
    static function main(args : string[]) : void {
        var document = dom.window.document;
        var text = document.createTextNode("Hello, world!");
        document.getElementById("hello").appendChild(text);
    }
}








interface Flyable {
    abstract function fly() : void;
}

abstract class Animal {
    function eat() : void {
      log "An animal is eating!";
    }
}

class Bat extends Animal implements Flyable {
    override function fly() : void {
        log "A bat is flying!";
    }
}

abstract class Insect {
}

class Bee extends Insect implements Flyable {
    override function fly() : void {
        log "A bee is flying!";
    }
}




class _Main {

    static function main(args : string[]) : void {
        // fo bar
        var bat = new Bat();

        var animal : Animal = bat; // OK. A bat is an animal.
        animal.eat();

        var flyable : Flyable = bat; // OK. A bat can fly
        flyable.fly();

        // for Bee
        var bee = new Bee();

        flyable = bee; // A bee is also flyable
        flyable.fly();
    }
}





•	try-catch-finally statement
•	try {
•	    ...
•	} catch (e : TypeError) {
•	    // got TypeError
•	} catch (e : Error) {
•	    // got Error, which is not TypeError
•	} catch (e : variant) {
•	    // applications may throw any kind of value
•	} finally {
•	    ...
}





Nullable type is a meta type which indicates a value may be null. It is prohibited to assign null to the primitive types (note: Object types are nullable by default). Nullable types should instead be used for such purposes.
var s1 : string;
s1 = "abc";       // ok
s1 = null;        // compile error!  cannot assign null to string

var s2 : Nullable.<string>;
s2 = "abc";       // ok
s2 = null;        // ok






Variant type, which means "no static type information," is useful for interacting with existing JavaScript APIs. Some JavaScript libraries may return a variant value, which type cannot be determined at compile time. All you can do on variant values is to check equality of a variant value to another variant value. You have to cast it to another type before doing anything else on the value.

function guessTheType(v : variant) : void {
    if (typeof v == "string") {
        log "v is string and the value is:" + v as string;
    } else {
        log "v is not string";
    }
}







Object types are types of values to hold reference to objects - which are instances of classes. For example, functions, string[] (array of strings), Date are all object types. Whether they are mutable or not depends on the definition of each class.
Most of the objects (values of object types) are constructed using the new operator.

var d = new Date();            // instantiate an object of class Date
var a = new Array.<string>();  // instantiate an array of string
var m = new Map.<number>();    // instantiate an associative map of strings to numbers







Type annotations can be omitted when a variable is initialized at the same moment of declaration.
var s = "hello";  // s is string, initialized as "hello"
var n = 42;       // n is number, initialized as 42
var b = true;     // b is boolean, initialized as true






Basic type concept will be described in this section. 
Primitive types, 
object types, 
variant type, and 
Nullable types exist in JSX.

Pritimive Types
There are three pritimive types in JSX: string, number, and boolean. The three are non-nullable, immutable types. The code snippet below declares three variables s, n, b with their repective types, annocated to the right of the name of the variables using the : mark.
var s : string;
var n : number;
var b : boolean;


    
    



class Employee{
	var empId=0;
	var ename="";
	var salary=0;

	function constructor(){
		log("Default constructor of Employee is called");
		this.empId=0;
		this.ename="";
		this.salary=0;
	}

	function constructor(id:number,name:string,sal:number){
		log("Parameterised constructor of Employee is called");
		this.empId=id;
		this.ename=name;
		this.salary=sal;
	}

	function showDetails():void{
		log("Employee details are "+this.empId+" "+this.ename+" "+this.salary);
	}

}


class _Main {
    static function main(args : string[]) : void {
        log "Hello, world!";
        var e1=new Employee(101,"Eshan",10000);
        e1.showDetails();
    }
}








Let's start by running our first JSX program: hello.jsx. We use the jsx command, which is the JSX compiler in the JSX distribution, to compile JSX source code to JavaScript.

First, install jsx with npm:
$ npm install -g jsx
Then, make the code below as hello.jsx:

class _Main {
    static function main(args : string[]) : void {
        log "Hello, world!";
    }
}
Now you can run a JSX program with the following command and you will get Hello, world on the console.

$ jsx --run hello.jsx







JSX is faster because it performs optimization while compiling code to JavaScript.
It is also type-safe and most of the errors can be caught during compilation.
JSX makes it easier and faster to write templates if you are familiar with HTML.






JSX is a preprocessor step that adds XML syntax to JavaScript. You can definitely use React without JSX but JSX makes React a lot more elegant.
Just like XML, JSX tags have a tag name, attributes, and children. If an attribute value is enclosed in quotes, the value is a string. Otherwise, wrap the value in braces and the value is the enclosed JavaScript expression.


JSX [ JavaScript syntax extension ]







const path = require('path');

var config = {
    entry: './main.js',

    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: 'index.js',
    },
    devServer: {
        inline: true,
        port: 3030
    },

    module: {
        rules: [{
                test: /\.jsx?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',

                query: {
                    presets: ['es2015', 'react']
                }
            }

        ],


    }
}
module.exports = config;








<!DOCTYPE html>
<html lang="en">

<head>
    <title></title>
</head>

<body>
    <div id="app"></div>
    <script src="index.js"></script>
</body>

</html>







import React from 'react'
import ReactDOM from 'react-dom'
import App from './App.jsx'
ReactDOM.render( < App / > ,
    document.getElementById("app")
);






import React from "react"
class App extends React.Component{
    render(){
        return(
            <div> WElcome to react app from app.jsx
               
            </div>
        );
    }
}

export default App;









{
    "name": "myapplication",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
        "start": "webpack-dev-server --hot"
    },
    "author": "SBM",
    "license": "ISC",
    "dependencies": {
        "babel-cli": "^6.26.0",
        "babel-core": "^6.26.3",
        "babel-loader": "^7.1.5",
        "babel-preset-es2015": "^6.24.1",
        "babel-preset-react": "^6.24.1",
        "react": "^16.4.1",
        "react-dom": "^16.4.1",
        "webpack": "^4.16.1",
        "webpack-cli": "^3.1.0",
        "webpack-dev-server": "^3.1.4"
    }
}
        





We will use webpack bundler in these tutorials so let's install webpack and webpack-dev-server.

C:\Users\username>npm install webpack --save
C:\Users\username>npm install webpack-dev-server --save
Since we want to use React, we need to install it first. The --save command will add these packages to package.json file.

C:\Users\username\Desktop\reactApp>npm install react --save
C:\Users\username\Desktop\reactApp>npm install react-dom --save
We already mentioned that we will need some babel plugins so let's install it too.

C:\Users\username\Desktop\reactApp>npm install babel-core
C:\Users\username\Desktop\reactApp>npm install babel-loader
C:\Users\username\Desktop\reactApp>npm install babel-preset-react
C:\Users\username\Desktop\reactApp>npm install babel-preset-es2015

    
    
    


npm install takes 3 exclusive, optional flags which save or update the package version in your main package.json:

-S, --save: Package will appear in your dependencies.

-D, --save-dev: Package will appear in your devDependencies.

-O, --save-optional: Package will appear in your optionalDependencies.

When using any of the above options to save dependencies to your package.json, there is an additional, optional flag:

-E, --save-exact: Saved dependencies will be configured with an exact version rather than using npm's default semver range operator.

    
    
    


Step 1 - Install Global Packages

You will need to install several packages for this setup. We will need some of the babel plugins so let's first install babel by running the following code in command prompt window.

C:\Users\username>npm install -g babel
C:\Users\username>npm install -g babel-cli

    
    


React follows component oriented development. The general idea is to break your whole UI into a set of components. In our case we have just one component named Greeting. In React, you create a component by calling React.createClass(). Every component has a render() method which returns markup to render. In the above snippet we simply returned <p>Hello, Universe</p>, which is then displayed in the view.
A component doesn’t do anything until it’s rendered. To render a component you call ReactDOM.render() with the component to render as the first argument. The second argument is the HTML element in which you would like to render your component. In our case we render our Greeting component into the <div> with an ID of greeting-div.
You might be wondering what <greeting> really is? This syntax is known as JSX (JavaScript XML) which lets you build DOM nodes with HTML-like syntax. JSX is completely optional and you don’t need it in order to use React, but it has a lot of nice features and there is no reason not to take advantage of it.
Since the browser doesn’t understand JSX natively, we need to transform it to JavaScript first. This is handled by including Babel 5’s in-browser ES6 and JSX transformer called browser.js. Babel will recognize JSX code in <script type="text/babel"></script> tags and transform it into JavaScript on the fly. Transforming JSX in the browser works quite well during development. However, you will need to pre-compile your JSX code into JS before deploying to production so that your app renders faster. We will see how to do that later on.





<!DOCTYPE html>
<html>
<head>
	<title></title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
</head>
<body>
<div id="example"></div>
<script type="text/babel">
	
	var HelloWorld=React.createClass({
		render:function(){
		return(<p> Hello World from Component</p>)
	    }
    })



	ReactDOM.render(<HelloWorld/>,document.getElementById('example'));
</script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
	<title></title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>

</head>
<body>

<div id="example"></div>
<script type="text/babel">

	ReactDOM.render(<h1> Hello World</h1>,document.getElementById('example'));
	


</script>

</body>
</html>







React uses virtual DOM which is JavaScript object. This will improve apps performance since JavaScript virtual DOM is faster than the regular DOM.
React can be used on client and server side.
Component and Data patterns improve readability which helps to maintain larger apps.
React can be used with other frameworks.











React is a JavaScript library for creating user interfaces by Facebook and Instagram. Many people choose to think of React as the V in MVC.
We built React to solve one problem: building large applications with data that changes over time.
Simple
Simply express how your app should look at any given point in time, and React will automatically manage all UI updates when your underlying data changes.
Declarative
When the data changes, React conceptually hits the "refresh" button, and knows to only update the changed parts.
Build Composable Components
React is all about building reusable components. In fact, with React the only thing you do is build components. Since they're so encapsulated, components make code reuse, testing, and separation of concerns easy.





JSX − JSX is a JavaScript syntax extension that looks similar to XML. You can use a simple JSX syntactic transform with React.

Components − React is all about components. You need to think of everything as a component. This will help you to maintain the code when working on larger scale projects.

Unidirectional data flow and Flux − React implements one way data flow which makes it easy to reason about your app. Flux is a pattern that helps keeping your data unidirectional.

License − React is licensed under the Facebook Inc. Documentation is licensed under CC BY 4.0.






React is a UI library developed at Facebook to facilitate the creation of interactive, stateful & reusable UI components. It is used at Facebook in production, and Instagram.com is written entirely in React.
One of it’s unique selling points is that not only does it perform on the client side, but it can also be rendered server side, and they can work together inter-operably.
It also uses a concept called the Virtual DOM that selectively renders subtrees of nodes based upon state changes. It does the least amount of DOM manipulation possible in order to keep your components up to date.
